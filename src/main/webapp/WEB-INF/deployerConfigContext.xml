<?xml version="1.0" encoding="UTF-8"?>
<!-- | deployerConfigContext.xml centralizes into one file some of the declarative 
	configuration that | all CAS deployers will need to modify. | | This file 
	declares some of the Spring-managed JavaBeans that make up a CAS deployment. 
	| The beans declared in this file are instantiated at context initialization 
	time by the Spring | ContextLoaderListener declared in web.xml. It finds 
	this file because this | file is among those declared in the context parameter 
	"contextConfigLocation". | | By far the most common change you will need 
	to make in this file is to change the last bean | declaration to replace 
	the default authentication handler with | one implementing your approach 
	for authenticating usernames and passwords. + -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


	<util:map id="authenticationHandlersResolvers">
		<entry key-ref="proxyAuthenticationHandler" value-ref="proxyPrincipalResolver" />
		<entry key-ref="primaryAuthenticationHandler" value-ref="primaryPrincipalResolver" />
	</util:map>

	<util:list id="authenticationMetadataPopulators">
		<ref bean="successfulHandlerMetaDataPopulator" />
		<ref bean="rememberMeAuthenticationMetaDataPopulator" />
	</util:list>

	<!-- 修改前 -->
	<!-- <bean id="attributeRepository" class="org.jasig.services.persondir.support.NamedStubPersonAttributeDao" 
		p:backingMap-ref="attrRepoBackingMap" /> -->
	<!-- 修改前 end -->

	<!--修改后 返回更多user信息 -->
	<bean id="attributeRepository"
		class="com.github.water.service.persondir.support.AccoutAttributeDao">
		<property name="userInfoService" ref="userInfoService" />
	</bean>
	<!--修改后 end -->

	<alias name="acceptUsersAuthenticationHandler" alias="primaryAuthenticationHandler" />

	<!-- 修改验证方式 -->
	<bean id="acceptUsersAuthenticationHandler"
		class="com.github.water.authentication.AcceptJdbcUsersAuthenticationHandler">
		<property name="userInfoService" ref="userInfoService" />
		<property name="jdbcTemplate" ref="jdbcTemplate" />
		<!-- <property name="myPasswordEncoder">
			自定义加密方式（security的BCryptPasswordEncoder加密）
			<bean id="myPasswordEncoder" class="com.github.water.conf.MyPasswordEncoder">
			</bean>
		</property> -->
		<property name="myPasswordEncoder">     
        <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder">     
            <!-- false 表示：生成32位的Hex版, 这也是encodeHashAsBase64的, Acegi 默认配置; true  表示：生成24位的Base64版 -->     
            <property name="encodeHashAsBase64" value="false" />     
        </bean>     
    </property>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />

	</bean>

	<bean id="userInfoService" class="com.github.water.service.UserInfoService">
		<!-- <constructor-arg index="0" ref="jdbcTemplate" /> -->
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>

	<!-- HikariCP 高性能数据库连接池 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="shutdown">
		<constructor-arg>
			<bean class="com.zaxxer.hikari.HikariConfig">
				<property name="driverClassName" value="${db.driverClassName}" />
				<property name="jdbcUrl" value="${db.jdbcUrl}" />
				<property name="username" value="${db.username}" />
				<property name="password" value="${db.password}" />
				<property name="connectionTimeout" value="${db.connectionTimeout}" />
				<property name="idleTimeout" value="${db.idleTimeout}" />
				<property name="maxLifetime" value="${db.maxLifetime}" />
				<property name="maximumPoolSize" value="${db.maximumPoolSize}" />
				<property name="minimumIdle" value="${db.minimumIdle}" />
			</bean>
		</constructor-arg>
	</bean>
	<alias name="personDirectoryPrincipalResolver" alias="primaryPrincipalResolver" />

	<util:map id="attrRepoBackingMap">
		<entry key="uid" value="uid" />
		<entry key="eduPersonAffiliation" value="eduPersonAffiliation" />
		<entry key="groupMembership" value="groupMembership" />
		<entry>
			<key>
				<value>memberOf</value>
			</key>
			<list>
				<value>faculty</value>
				<value>staff</value>
				<value>org</value>
			</list>
		</entry>
	</util:map>

	<alias name="serviceThemeResolver" alias="themeResolver" />

	<alias name="jsonServiceRegistryDao" alias="serviceRegistryDao" />

	<alias name="defaultTicketRegistry" alias="ticketRegistry" />

	<!--******************************** redis start **************************************** -->

	<bean id="defaultTicketRegistry" class="com.github.water.service.persondir.support.RedisTicketRegistry">
		<!-- <property name="hosts" value="${redis.host}" />
		<property name="port" value="${redis.port}" /> -->
		<property name="prefix" value="${redis.prefix}" />
		<property name="st_time" value="${st.timeToKillInSeconds}" />
		<property name="tgt_time" value="${tgt.timeToKillInSeconds}" />
		<property name="redisService" ref="redisService" />
	</bean>

	<bean id="redisService" class="com.github.water.service.RedisServiceImpl">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>

	<!--******************************** redis end **************************************** -->


	<alias name="ticketGrantingTicketExpirationPolicy" alias="grantingTicketExpirationPolicy" />
	<alias name="multiTimeUseOrTimeoutExpirationPolicy" alias="serviceTicketExpirationPolicy" />

	<bean id="serviceTicketExpirationPolicy"
		class="org.jasig.cas.ticket.support.MultiTimeUseOrTimeoutExpirationPolicy"
		c:numberOfUses="${st.numberOfUses}" c:timeToKill="${st.timeToKillInSeconds}"
		c:timeUnit-ref="SECONDS" />

	<!-- TicketGrantingTicketExpirationPolicy: Default as of 3.5 -->
	<!-- 当用户在2个小时（配置中是毫秒）之内不动移动鼠标或者进行系统超过8个小时（28800秒），则tgt过期 -->
	<!-- Provides both idle and hard timeouts, for instance 2 hour sliding window 
		with an 8 hour max lifetime -->
	<bean id="grantingTicketExpirationPolicy"
		class="org.jasig.cas.ticket.support.TicketGrantingTicketExpirationPolicy"
		p:maxTimeToLiveInSeconds="${tgt.maxTimeToLiveInSeconds}"
		p:timeToKillInSeconds="${tgt.timeToKillInSeconds}" />

	<alias name="anyAuthenticationPolicy" alias="authenticationPolicy" />
	<alias name="acceptAnyAuthenticationPolicyFactory" alias="authenticationPolicyFactory" />

	<bean id="auditTrailManager"
		class="org.jasig.inspektr.audit.support.Slf4jLoggingAuditTrailManager"
		p:entrySeparator="${cas.audit.singleline.separator:|}"
		p:useSingleLine="${cas.audit.singleline:false}" />

	<alias name="neverThrottle" alias="authenticationThrottle" />

	<util:list id="monitorsList">
		<ref bean="memoryMonitor" />
		<ref bean="sessionMonitor" />
	</util:list>

	<alias name="defaultPrincipalFactory" alias="principalFactory" />
	<alias name="defaultAuthenticationTransactionManager" alias="authenticationTransactionManager" />
	<alias name="defaultPrincipalElectionStrategy" alias="principalElectionStrategy" />

	<bean
		class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration" />

	<!-- redis操作模板 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>
	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.password}"
		p:pool-config-ref="poolConfig" />
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" />
</beans>
